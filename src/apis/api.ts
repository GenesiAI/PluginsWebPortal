/* tslint:disable */
/* eslint-disable */
/**
 * Genesi AI Plugin API
 * API set to get and manage Plugins. routes are intended to be accessed on subdomains in the format {pluginId}.Genesi.AI.
 *
 * The version of the OpenAPI document: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { RequestArgs } from './base';
import { DUMMY_BASE_URL, assertParamExists, createRequestFunction, serializeDataIfNeeded, setSearchParams, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AiPluginManifest
 */
export interface AiPluginManifest {
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'schema_version'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'name_for_human'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'name_for_model'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'description_for_human'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'description_for_model'?: string | null;
    /**
     * 
     * @type {Auth}
     * @memberof AiPluginManifest
     */
    'auth'?: Auth;
    /**
     * 
     * @type {Api}
     * @memberof AiPluginManifest
     */
    'api'?: Api;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'logo_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'contact_email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'legal_info_url'?: string | null;
}
/**
 * 
 * @export
 * @interface Api
 */
export interface Api {
    /**
     * 
     * @type {string}
     * @memberof Api
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Api
     */
    'url'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Api
     */
    'is_user_authenticated'?: boolean;
}
/**
 * 
 * @export
 * @interface Auth
 */
export interface Auth {
    /**
     * 
     * @type {string}
     * @memberof Auth
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface Chat
 */
export interface Chat {
    /**
     * 
     * @type {Plugin}
     * @memberof Chat
     */
    'aiPlugin'?: Plugin;
    /**
     * 
     * @type {Array<Message>}
     * @memberof Chat
     */
    'messages'?: Array<Message> | null;
}
/**
 * 
 * @export
 * @interface ChatData
 */
export interface ChatData {
    /**
     * 
     * @type {number}
     * @memberof ChatData
     */
    'maxMessagesLast24H'?: number;
    /**
     * 
     * @type {number}
     * @memberof ChatData
     */
    'messagesLast24H'?: number;
}
/**
 * 
 * @export
 * @interface ChatResponse
 */
export interface ChatResponse {
    /**
     * 
     * @type {Message}
     * @memberof ChatResponse
     */
    'message'?: Message;
    /**
     * 
     * @type {ChatData}
     * @memberof ChatResponse
     */
    'chatData'?: ChatData;
}
/**
 * 
 * @export
 * @interface ContactFormRequest
 */
export interface ContactFormRequest {
    /**
     * 
     * @type {string}
     * @memberof ContactFormRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ContactFormRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ContactFormRequest
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'role'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'content'?: string | null;
}
/**
 * 
 * @export
 * @interface Plugin
 */
export interface Plugin {
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Plugin
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'userId'?: string | null;
    /**
     * 
     * @type {Array<Section>}
     * @memberof Plugin
     */
    'sections'?: Array<Section> | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'nameForHuman'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'nameForModel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'descriptionForHuman'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'descriptionForModel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'logoUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'legalInfoUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'creationDateTime'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Plugin
     */
    'isDeleted'?: boolean;
}
/**
 * 
 * @export
 * @interface PluginCreateRequest
 */
export interface PluginCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'nameForHuman'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'nameForModel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'descriptionForHuman'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'descriptionForModel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'logoUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'legalInfoUrl'?: string | null;
    /**
     * 
     * @type {Array<SectionCreateRequest>}
     * @memberof PluginCreateRequest
     */
    'sections'?: Array<SectionCreateRequest> | null;
}
/**
 * 
 * @export
 * @interface PluginUpdateRequest
 */
export interface PluginUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'nameForHuman'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'nameForModel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'descriptionForHuman'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'descriptionForModel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'logoUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'legalInfoUrl'?: string | null;
    /**
     * 
     * @type {Array<SectionCreateRequest>}
     * @memberof PluginUpdateRequest
     */
    'sections'?: Array<SectionCreateRequest> | null;
}
/**
 * 
 * @export
 * @interface PluginsResponse
 */
export interface PluginsResponse {
    /**
     * 
     * @type {number}
     * @memberof PluginsResponse
     */
    'pluginsCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof PluginsResponse
     */
    'maxPlugins'?: number;
    /**
     * 
     * @type {Array<Plugin>}
     * @memberof PluginsResponse
     */
    'plugins'?: Array<Plugin> | null;
}
/**
 * 
 * @export
 * @interface Section
 */
export interface Section {
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'pluginId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'content'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Section
     */
    'isDeleted'?: boolean;
}
/**
 * 
 * @export
 * @interface SectionCreateRequest
 */
export interface SectionCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof SectionCreateRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SectionCreateRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SectionCreateRequest
     */
    'content'?: string | null;
}
/**
 * 
 * @export
 * @interface SectionUpdateRequest
 */
export interface SectionUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SectionUpdateRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SectionUpdateRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SectionUpdateRequest
     */
    'content'?: string | null;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {boolean}
     * @memberof UserInfo
     */
    'isPremium'?: boolean;
    /**
     * 
     * @type {ChatData}
     * @memberof UserInfo
     */
    'chatData'?: ChatData;
}

/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Chat} [chat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChatPost: async (chat?: Chat, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chat, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Chat} [chat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChatPost(chat?: Chat, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChatPost(chat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatApiFp(configuration)
    return {
        /**
         * 
         * @param {Chat} [chat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChatPost(chat?: Chat, options?: any): AxiosPromise<ChatResponse> {
            return localVarFp.apiChatPost(chat, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
    /**
     * 
     * @param {Chat} [chat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public apiChatPost(chat?: Chat, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).apiChatPost(chat, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentsIntentGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payments/intent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentsUnsubscribePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payments/unsubscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentsWebhookPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Payments/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentsIntentGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPaymentsIntentGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentsUnsubscribePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPaymentsUnsubscribePost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPaymentsWebhookPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPaymentsWebhookPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentsIntentGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiPaymentsIntentGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentsUnsubscribePost(options?: any): AxiosPromise<void> {
            return localVarFp.apiPaymentsUnsubscribePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPaymentsWebhookPost(options?: any): AxiosPromise<void> {
            return localVarFp.apiPaymentsWebhookPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export class PaymentsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public apiPaymentsIntentGet(options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).apiPaymentsIntentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public apiPaymentsUnsubscribePost(options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).apiPaymentsUnsubscribePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public apiPaymentsWebhookPost(options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).apiPaymentsWebhookPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PluginApi - axios parameter creator
 * @export
 */
export const PluginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/plugins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdDelete: async (pluginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdDelete', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}`
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdGet: async (pluginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdGet', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}`
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {PluginUpdateRequest} [pluginUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdPut: async (pluginId: string, pluginUpdateRequest?: PluginUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdPut', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}`
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pluginUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsGet: async (pluginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsGet', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}/sections`
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {SectionCreateRequest} [sectionCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsPost: async (pluginId: string, sectionCreateRequest?: SectionCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsPost', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}/sections`
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sectionCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sectionId 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsSectionIdDelete: async (sectionId: string, pluginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsSectionIdDelete', 'sectionId', sectionId)
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsSectionIdDelete', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}/sections/{sectionId}`
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsSectionIdGet: async (pluginId: string, sectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsSectionIdGet', 'pluginId', pluginId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsSectionIdGet', 'sectionId', sectionId)
            const localVarPath = `/api/plugins/{pluginId}/sections/{sectionId}`
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sectionId 
         * @param {string} pluginId 
         * @param {SectionUpdateRequest} [sectionUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsSectionIdPut: async (sectionId: string, pluginId: string, sectionUpdateRequest?: SectionUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsSectionIdPut', 'sectionId', sectionId)
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsSectionIdPut', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}/sections/{sectionId}`
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sectionUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PluginCreateRequest} [pluginCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPost: async (pluginCreateRequest?: PluginCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/plugins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pluginCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PluginApi - functional programming interface
 * @export
 */
export const PluginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PluginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdDelete(pluginId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdDelete(pluginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdGet(pluginId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plugin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdGet(pluginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {PluginUpdateRequest} [pluginUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdPut(pluginId: string, pluginUpdateRequest?: PluginUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdPut(pluginId, pluginUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdSectionsGet(pluginId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Section>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdSectionsGet(pluginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {SectionCreateRequest} [sectionCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdSectionsPost(pluginId: string, sectionCreateRequest?: SectionCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Section>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdSectionsPost(pluginId, sectionCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sectionId 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdSectionsSectionIdDelete(sectionId: string, pluginId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdSectionsSectionIdDelete(sectionId, pluginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdSectionsSectionIdGet(pluginId: string, sectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Section>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdSectionsSectionIdGet(pluginId, sectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sectionId 
         * @param {string} pluginId 
         * @param {SectionUpdateRequest} [sectionUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdSectionsSectionIdPut(sectionId: string, pluginId: string, sectionUpdateRequest?: SectionUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdSectionsSectionIdPut(sectionId, pluginId, sectionUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PluginCreateRequest} [pluginCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPost(pluginCreateRequest?: PluginCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plugin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPost(pluginCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PluginApi - factory interface
 * @export
 */
export const PluginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PluginApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsGet(options?: any): AxiosPromise<PluginsResponse> {
            return localVarFp.apiPluginsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdDelete(pluginId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPluginsPluginIdDelete(pluginId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdGet(pluginId: string, options?: any): AxiosPromise<Plugin> {
            return localVarFp.apiPluginsPluginIdGet(pluginId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {PluginUpdateRequest} [pluginUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdPut(pluginId: string, pluginUpdateRequest?: PluginUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiPluginsPluginIdPut(pluginId, pluginUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsGet(pluginId: string, options?: any): AxiosPromise<Array<Section>> {
            return localVarFp.apiPluginsPluginIdSectionsGet(pluginId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {SectionCreateRequest} [sectionCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsPost(pluginId: string, sectionCreateRequest?: SectionCreateRequest, options?: any): AxiosPromise<Section> {
            return localVarFp.apiPluginsPluginIdSectionsPost(pluginId, sectionCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sectionId 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsSectionIdDelete(sectionId: string, pluginId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPluginsPluginIdSectionsSectionIdDelete(sectionId, pluginId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsSectionIdGet(pluginId: string, sectionId: string, options?: any): AxiosPromise<Section> {
            return localVarFp.apiPluginsPluginIdSectionsSectionIdGet(pluginId, sectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sectionId 
         * @param {string} pluginId 
         * @param {SectionUpdateRequest} [sectionUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsSectionIdPut(sectionId: string, pluginId: string, sectionUpdateRequest?: SectionUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiPluginsPluginIdSectionsSectionIdPut(sectionId, pluginId, sectionUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PluginCreateRequest} [pluginCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPost(pluginCreateRequest?: PluginCreateRequest, options?: any): AxiosPromise<Plugin> {
            return localVarFp.apiPluginsPost(pluginCreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PluginApi - object-oriented interface
 * @export
 * @class PluginApi
 * @extends {BaseAPI}
 */
export class PluginApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsGet(options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pluginId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdDelete(pluginId: string, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdDelete(pluginId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pluginId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdGet(pluginId: string, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdGet(pluginId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pluginId 
     * @param {PluginUpdateRequest} [pluginUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdPut(pluginId: string, pluginUpdateRequest?: PluginUpdateRequest, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdPut(pluginId, pluginUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pluginId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdSectionsGet(pluginId: string, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdSectionsGet(pluginId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pluginId 
     * @param {SectionCreateRequest} [sectionCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdSectionsPost(pluginId: string, sectionCreateRequest?: SectionCreateRequest, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdSectionsPost(pluginId, sectionCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sectionId 
     * @param {string} pluginId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdSectionsSectionIdDelete(sectionId: string, pluginId: string, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdSectionsSectionIdDelete(sectionId, pluginId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pluginId 
     * @param {string} sectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdSectionsSectionIdGet(pluginId: string, sectionId: string, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdSectionsSectionIdGet(pluginId, sectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sectionId 
     * @param {string} pluginId 
     * @param {SectionUpdateRequest} [sectionUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdSectionsSectionIdPut(sectionId: string, pluginId: string, sectionUpdateRequest?: SectionUpdateRequest, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdSectionsSectionIdPut(sectionId, pluginId, sectionUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PluginCreateRequest} [pluginCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPost(pluginCreateRequest?: PluginCreateRequest, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPost(pluginCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PublicPluginApi - axios parameter creator
 * @export
 */
export const PublicPluginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ContactFormRequest} [contactFormRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactPost: async (contactFormRequest?: ContactFormRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactFormRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openapiJsonGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/openapi.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sectionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sectionNameGet: async (sectionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionName' is not null or undefined
            assertParamExists('sectionNameGet', 'sectionName', sectionName)
            const localVarPath = `/{sectionName}`
                .replace(`{${"sectionName"}}`, encodeURIComponent(String(sectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnownAiPluginJsonGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/.well-known/ai-plugin.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicPluginApi - functional programming interface
 * @export
 */
export const PublicPluginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicPluginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ContactFormRequest} [contactFormRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contactPost(contactFormRequest?: ContactFormRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contactPost(contactFormRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openapiJsonGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openapiJsonGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sectionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sectionNameGet(sectionName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Section>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sectionNameGet(sectionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wellKnownAiPluginJsonGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AiPluginManifest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wellKnownAiPluginJsonGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicPluginApi - factory interface
 * @export
 */
export const PublicPluginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicPluginApiFp(configuration)
    return {
        /**
         * 
         * @param {ContactFormRequest} [contactFormRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactPost(contactFormRequest?: ContactFormRequest, options?: any): AxiosPromise<void> {
            return localVarFp.contactPost(contactFormRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openapiJsonGet(options?: any): AxiosPromise<void> {
            return localVarFp.openapiJsonGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sectionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sectionNameGet(sectionName: string, options?: any): AxiosPromise<Section> {
            return localVarFp.sectionNameGet(sectionName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnownAiPluginJsonGet(options?: any): AxiosPromise<AiPluginManifest> {
            return localVarFp.wellKnownAiPluginJsonGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicPluginApi - object-oriented interface
 * @export
 * @class PublicPluginApi
 * @extends {BaseAPI}
 */
export class PublicPluginApi extends BaseAPI {
    /**
     * 
     * @param {ContactFormRequest} [contactFormRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicPluginApi
     */
    public contactPost(contactFormRequest?: ContactFormRequest, options?: AxiosRequestConfig) {
        return PublicPluginApiFp(this.configuration).contactPost(contactFormRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicPluginApi
     */
    public openapiJsonGet(options?: AxiosRequestConfig) {
        return PublicPluginApiFp(this.configuration).openapiJsonGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sectionName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicPluginApi
     */
    public sectionNameGet(sectionName: string, options?: AxiosRequestConfig) {
        return PublicPluginApiFp(this.configuration).sectionNameGet(sectionName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicPluginApi
     */
    public wellKnownAiPluginJsonGet(options?: AxiosRequestConfig) {
        return PublicPluginApiFp(this.configuration).wellKnownAiPluginJsonGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGet(options?: any): AxiosPromise<UserInfo> {
            return localVarFp.apiUserGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGet(options).then((request) => request(this.axios, this.basePath));
    }
}


