/* tslint:disable */
/* eslint-disable */
/**
 * Genesi AI Plugin API
 * API set to get and manage Plugins. routes are intended to be accessed on subdomains in the format {pluginId}.Genesi.AI.
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { RequestArgs } from './base';
import { DUMMY_BASE_URL, assertParamExists, createRequestFunction, serializeDataIfNeeded, setSearchParams, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AiPluginManifest
 */
export interface AiPluginManifest {
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'schema_version'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'name_for_human'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'name_for_model'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'description_for_human'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'description_for_model'?: string | null;
    /**
     * 
     * @type {Auth}
     * @memberof AiPluginManifest
     */
    'auth'?: Auth;
    /**
     * 
     * @type {Api}
     * @memberof AiPluginManifest
     */
    'api'?: Api;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'logo_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'contact_email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AiPluginManifest
     */
    'legal_info_url'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AnyType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type AnyType = typeof AnyType[keyof typeof AnyType];


/**
 * 
 * @export
 * @interface Api
 */
export interface Api {
    /**
     * 
     * @type {string}
     * @memberof Api
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Api
     */
    'url'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Api
     */
    'is_user_authenticated'?: boolean;
}
/**
 * 
 * @export
 * @interface Auth
 */
export interface Auth {
    /**
     * 
     * @type {string}
     * @memberof Auth
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface IOpenApiAny
 */
export interface IOpenApiAny {
    /**
     * 
     * @type {any}
     * @memberof IOpenApiAny
     */
    'anyType'?: any;
}


/**
 * 
 * @export
 * @interface OpenApiCallback
 */
export interface OpenApiCallback {
    /**
     * 
     * @type {{ [key: string]: OpenApiPathItem; }}
     * @memberof OpenApiCallback
     */
    'pathItems'?: { [key: string]: OpenApiPathItem; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiCallback
     */
    'unresolvedReference'?: boolean;
    /**
     * 
     * @type {OpenApiReference}
     * @memberof OpenApiCallback
     */
    'reference'?: OpenApiReference;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiCallback
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiComponents
 */
export interface OpenApiComponents {
    /**
     * 
     * @type {{ [key: string]: OpenApiSchema; }}
     * @memberof OpenApiComponents
     */
    'schemas'?: { [key: string]: OpenApiSchema; } | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiResponse; }}
     * @memberof OpenApiComponents
     */
    'responses'?: { [key: string]: OpenApiResponse; } | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiParameter; }}
     * @memberof OpenApiComponents
     */
    'parameters'?: { [key: string]: OpenApiParameter; } | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiExample; }}
     * @memberof OpenApiComponents
     */
    'examples'?: { [key: string]: OpenApiExample; } | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiRequestBody; }}
     * @memberof OpenApiComponents
     */
    'requestBodies'?: { [key: string]: OpenApiRequestBody; } | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiHeader; }}
     * @memberof OpenApiComponents
     */
    'headers'?: { [key: string]: OpenApiHeader; } | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiSecurityScheme; }}
     * @memberof OpenApiComponents
     */
    'securitySchemes'?: { [key: string]: OpenApiSecurityScheme; } | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiLink; }}
     * @memberof OpenApiComponents
     */
    'links'?: { [key: string]: OpenApiLink; } | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiCallback; }}
     * @memberof OpenApiComponents
     */
    'callbacks'?: { [key: string]: OpenApiCallback; } | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiComponents
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiContact
 */
export interface OpenApiContact {
    /**
     * 
     * @type {string}
     * @memberof OpenApiContact
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiContact
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiContact
     */
    'email'?: string | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiContact
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiDiscriminator
 */
export interface OpenApiDiscriminator {
    /**
     * 
     * @type {string}
     * @memberof OpenApiDiscriminator
     */
    'propertyName'?: string | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof OpenApiDiscriminator
     */
    'mapping'?: { [key: string]: string; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiDocument
 */
export interface OpenApiDocument {
    /**
     * 
     * @type {OpenApiWorkspace}
     * @memberof OpenApiDocument
     */
    'workspace'?: OpenApiWorkspace;
    /**
     * 
     * @type {OpenApiInfo}
     * @memberof OpenApiDocument
     */
    'info'?: OpenApiInfo;
    /**
     * 
     * @type {Array<OpenApiServer>}
     * @memberof OpenApiDocument
     */
    'servers'?: Array<OpenApiServer> | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiPathItem; }}
     * @memberof OpenApiDocument
     */
    'paths'?: { [key: string]: OpenApiPathItem; } | null;
    /**
     * 
     * @type {OpenApiComponents}
     * @memberof OpenApiDocument
     */
    'components'?: OpenApiComponents;
    /**
     * 
     * @type {Array<{ [key: string]: Array<string>; }>}
     * @memberof OpenApiDocument
     */
    'securityRequirements'?: Array<{ [key: string]: Array<string>; }> | null;
    /**
     * 
     * @type {Array<OpenApiTag>}
     * @memberof OpenApiDocument
     */
    'tags'?: Array<OpenApiTag> | null;
    /**
     * 
     * @type {OpenApiExternalDocs}
     * @memberof OpenApiDocument
     */
    'externalDocs'?: OpenApiExternalDocs;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiDocument
     */
    'extensions'?: { [key: string]: object; } | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiDocument
     */
    'hashCode'?: string | null;
}
/**
 * 
 * @export
 * @interface OpenApiEncoding
 */
export interface OpenApiEncoding {
    /**
     * 
     * @type {string}
     * @memberof OpenApiEncoding
     */
    'contentType'?: string | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiHeader; }}
     * @memberof OpenApiEncoding
     */
    'headers'?: { [key: string]: OpenApiHeader; } | null;
    /**
     * 
     * @type {ParameterStyle}
     * @memberof OpenApiEncoding
     */
    'style'?: ParameterStyle;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiEncoding
     */
    'explode'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiEncoding
     */
    'allowReserved'?: boolean | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiEncoding
     */
    'extensions'?: { [key: string]: object; } | null;
}


/**
 * 
 * @export
 * @interface OpenApiExample
 */
export interface OpenApiExample {
    /**
     * 
     * @type {string}
     * @memberof OpenApiExample
     */
    'summary'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiExample
     */
    'description'?: string | null;
    /**
     * 
     * @type {IOpenApiAny}
     * @memberof OpenApiExample
     */
    'value'?: IOpenApiAny;
    /**
     * 
     * @type {string}
     * @memberof OpenApiExample
     */
    'externalValue'?: string | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiExample
     */
    'extensions'?: { [key: string]: object; } | null;
    /**
     * 
     * @type {OpenApiReference}
     * @memberof OpenApiExample
     */
    'reference'?: OpenApiReference;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiExample
     */
    'unresolvedReference'?: boolean;
}
/**
 * 
 * @export
 * @interface OpenApiExternalDocs
 */
export interface OpenApiExternalDocs {
    /**
     * 
     * @type {string}
     * @memberof OpenApiExternalDocs
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiExternalDocs
     */
    'url'?: string | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiExternalDocs
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiHeader
 */
export interface OpenApiHeader {
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiHeader
     */
    'unresolvedReference'?: boolean;
    /**
     * 
     * @type {OpenApiReference}
     * @memberof OpenApiHeader
     */
    'reference'?: OpenApiReference;
    /**
     * 
     * @type {string}
     * @memberof OpenApiHeader
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiHeader
     */
    'required'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiHeader
     */
    'deprecated'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiHeader
     */
    'allowEmptyValue'?: boolean;
    /**
     * 
     * @type {ParameterStyle}
     * @memberof OpenApiHeader
     */
    'style'?: ParameterStyle;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiHeader
     */
    'explode'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiHeader
     */
    'allowReserved'?: boolean;
    /**
     * 
     * @type {OpenApiSchema}
     * @memberof OpenApiHeader
     */
    'schema'?: OpenApiSchema;
    /**
     * 
     * @type {IOpenApiAny}
     * @memberof OpenApiHeader
     */
    'example'?: IOpenApiAny;
    /**
     * 
     * @type {{ [key: string]: OpenApiExample; }}
     * @memberof OpenApiHeader
     */
    'examples'?: { [key: string]: OpenApiExample; } | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiMediaType; }}
     * @memberof OpenApiHeader
     */
    'content'?: { [key: string]: OpenApiMediaType; } | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiHeader
     */
    'extensions'?: { [key: string]: object; } | null;
}


/**
 * 
 * @export
 * @interface OpenApiInfo
 */
export interface OpenApiInfo {
    /**
     * 
     * @type {string}
     * @memberof OpenApiInfo
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiInfo
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiInfo
     */
    'version'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiInfo
     */
    'termsOfService'?: string | null;
    /**
     * 
     * @type {OpenApiContact}
     * @memberof OpenApiInfo
     */
    'contact'?: OpenApiContact;
    /**
     * 
     * @type {OpenApiLicense}
     * @memberof OpenApiInfo
     */
    'license'?: OpenApiLicense;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiInfo
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiLicense
 */
export interface OpenApiLicense {
    /**
     * 
     * @type {string}
     * @memberof OpenApiLicense
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiLicense
     */
    'url'?: string | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiLicense
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiLink
 */
export interface OpenApiLink {
    /**
     * 
     * @type {string}
     * @memberof OpenApiLink
     */
    'operationRef'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiLink
     */
    'operationId'?: string | null;
    /**
     * 
     * @type {{ [key: string]: RuntimeExpressionAnyWrapper; }}
     * @memberof OpenApiLink
     */
    'parameters'?: { [key: string]: RuntimeExpressionAnyWrapper; } | null;
    /**
     * 
     * @type {RuntimeExpressionAnyWrapper}
     * @memberof OpenApiLink
     */
    'requestBody'?: RuntimeExpressionAnyWrapper;
    /**
     * 
     * @type {string}
     * @memberof OpenApiLink
     */
    'description'?: string | null;
    /**
     * 
     * @type {OpenApiServer}
     * @memberof OpenApiLink
     */
    'server'?: OpenApiServer;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiLink
     */
    'extensions'?: { [key: string]: object; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiLink
     */
    'unresolvedReference'?: boolean;
    /**
     * 
     * @type {OpenApiReference}
     * @memberof OpenApiLink
     */
    'reference'?: OpenApiReference;
}
/**
 * 
 * @export
 * @interface OpenApiMediaType
 */
export interface OpenApiMediaType {
    /**
     * 
     * @type {OpenApiSchema}
     * @memberof OpenApiMediaType
     */
    'schema'?: OpenApiSchema;
    /**
     * 
     * @type {IOpenApiAny}
     * @memberof OpenApiMediaType
     */
    'example'?: IOpenApiAny;
    /**
     * 
     * @type {{ [key: string]: OpenApiExample; }}
     * @memberof OpenApiMediaType
     */
    'examples'?: { [key: string]: OpenApiExample; } | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiEncoding; }}
     * @memberof OpenApiMediaType
     */
    'encoding'?: { [key: string]: OpenApiEncoding; } | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiMediaType
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiOAuthFlow
 */
export interface OpenApiOAuthFlow {
    /**
     * 
     * @type {string}
     * @memberof OpenApiOAuthFlow
     */
    'authorizationUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiOAuthFlow
     */
    'tokenUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiOAuthFlow
     */
    'refreshUrl'?: string | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof OpenApiOAuthFlow
     */
    'scopes'?: { [key: string]: string; } | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiOAuthFlow
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiOAuthFlows
 */
export interface OpenApiOAuthFlows {
    /**
     * 
     * @type {OpenApiOAuthFlow}
     * @memberof OpenApiOAuthFlows
     */
    'implicit'?: OpenApiOAuthFlow;
    /**
     * 
     * @type {OpenApiOAuthFlow}
     * @memberof OpenApiOAuthFlows
     */
    'password'?: OpenApiOAuthFlow;
    /**
     * 
     * @type {OpenApiOAuthFlow}
     * @memberof OpenApiOAuthFlows
     */
    'clientCredentials'?: OpenApiOAuthFlow;
    /**
     * 
     * @type {OpenApiOAuthFlow}
     * @memberof OpenApiOAuthFlows
     */
    'authorizationCode'?: OpenApiOAuthFlow;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiOAuthFlows
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiOperation
 */
export interface OpenApiOperation {
    /**
     * 
     * @type {Array<OpenApiTag>}
     * @memberof OpenApiOperation
     */
    'tags'?: Array<OpenApiTag> | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiOperation
     */
    'summary'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiOperation
     */
    'description'?: string | null;
    /**
     * 
     * @type {OpenApiExternalDocs}
     * @memberof OpenApiOperation
     */
    'externalDocs'?: OpenApiExternalDocs;
    /**
     * 
     * @type {string}
     * @memberof OpenApiOperation
     */
    'operationId'?: string | null;
    /**
     * 
     * @type {Array<OpenApiParameter>}
     * @memberof OpenApiOperation
     */
    'parameters'?: Array<OpenApiParameter> | null;
    /**
     * 
     * @type {OpenApiRequestBody}
     * @memberof OpenApiOperation
     */
    'requestBody'?: OpenApiRequestBody;
    /**
     * 
     * @type {{ [key: string]: OpenApiResponse; }}
     * @memberof OpenApiOperation
     */
    'responses'?: { [key: string]: OpenApiResponse; } | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiCallback; }}
     * @memberof OpenApiOperation
     */
    'callbacks'?: { [key: string]: OpenApiCallback; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiOperation
     */
    'deprecated'?: boolean;
    /**
     * 
     * @type {Array<{ [key: string]: Array<string>; }>}
     * @memberof OpenApiOperation
     */
    'security'?: Array<{ [key: string]: Array<string>; }> | null;
    /**
     * 
     * @type {Array<OpenApiServer>}
     * @memberof OpenApiOperation
     */
    'servers'?: Array<OpenApiServer> | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiOperation
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiParameter
 */
export interface OpenApiParameter {
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiParameter
     */
    'unresolvedReference'?: boolean;
    /**
     * 
     * @type {OpenApiReference}
     * @memberof OpenApiParameter
     */
    'reference'?: OpenApiReference;
    /**
     * 
     * @type {string}
     * @memberof OpenApiParameter
     */
    'name'?: string | null;
    /**
     * 
     * @type {ParameterLocation}
     * @memberof OpenApiParameter
     */
    'in'?: ParameterLocation;
    /**
     * 
     * @type {string}
     * @memberof OpenApiParameter
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiParameter
     */
    'required'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiParameter
     */
    'deprecated'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiParameter
     */
    'allowEmptyValue'?: boolean;
    /**
     * 
     * @type {ParameterStyle}
     * @memberof OpenApiParameter
     */
    'style'?: ParameterStyle;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiParameter
     */
    'explode'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiParameter
     */
    'allowReserved'?: boolean;
    /**
     * 
     * @type {OpenApiSchema}
     * @memberof OpenApiParameter
     */
    'schema'?: OpenApiSchema;
    /**
     * 
     * @type {{ [key: string]: OpenApiExample; }}
     * @memberof OpenApiParameter
     */
    'examples'?: { [key: string]: OpenApiExample; } | null;
    /**
     * 
     * @type {IOpenApiAny}
     * @memberof OpenApiParameter
     */
    'example'?: IOpenApiAny;
    /**
     * 
     * @type {{ [key: string]: OpenApiMediaType; }}
     * @memberof OpenApiParameter
     */
    'content'?: { [key: string]: OpenApiMediaType; } | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiParameter
     */
    'extensions'?: { [key: string]: object; } | null;
}


/**
 * 
 * @export
 * @interface OpenApiPathItem
 */
export interface OpenApiPathItem {
    /**
     * 
     * @type {string}
     * @memberof OpenApiPathItem
     */
    'summary'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiPathItem
     */
    'description'?: string | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiOperation; }}
     * @memberof OpenApiPathItem
     */
    'operations'?: { [key: string]: OpenApiOperation; } | null;
    /**
     * 
     * @type {Array<OpenApiServer>}
     * @memberof OpenApiPathItem
     */
    'servers'?: Array<OpenApiServer> | null;
    /**
     * 
     * @type {Array<OpenApiParameter>}
     * @memberof OpenApiPathItem
     */
    'parameters'?: Array<OpenApiParameter> | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiPathItem
     */
    'extensions'?: { [key: string]: object; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiPathItem
     */
    'unresolvedReference'?: boolean;
    /**
     * 
     * @type {OpenApiReference}
     * @memberof OpenApiPathItem
     */
    'reference'?: OpenApiReference;
}
/**
 * 
 * @export
 * @interface OpenApiReference
 */
export interface OpenApiReference {
    /**
     * 
     * @type {string}
     * @memberof OpenApiReference
     */
    'externalResource'?: string | null;
    /**
     * 
     * @type {ReferenceType}
     * @memberof OpenApiReference
     */
    'type'?: ReferenceType;
    /**
     * 
     * @type {string}
     * @memberof OpenApiReference
     */
    'id'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiReference
     */
    'isExternal'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiReference
     */
    'isLocal'?: boolean;
    /**
     * 
     * @type {OpenApiDocument}
     * @memberof OpenApiReference
     */
    'hostDocument'?: OpenApiDocument;
    /**
     * 
     * @type {string}
     * @memberof OpenApiReference
     */
    'referenceV3'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiReference
     */
    'referenceV2'?: string | null;
}


/**
 * 
 * @export
 * @interface OpenApiRequestBody
 */
export interface OpenApiRequestBody {
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiRequestBody
     */
    'unresolvedReference'?: boolean;
    /**
     * 
     * @type {OpenApiReference}
     * @memberof OpenApiRequestBody
     */
    'reference'?: OpenApiReference;
    /**
     * 
     * @type {string}
     * @memberof OpenApiRequestBody
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiRequestBody
     */
    'required'?: boolean;
    /**
     * 
     * @type {{ [key: string]: OpenApiMediaType; }}
     * @memberof OpenApiRequestBody
     */
    'content'?: { [key: string]: OpenApiMediaType; } | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiRequestBody
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiResponse
 */
export interface OpenApiResponse {
    /**
     * 
     * @type {string}
     * @memberof OpenApiResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiHeader; }}
     * @memberof OpenApiResponse
     */
    'headers'?: { [key: string]: OpenApiHeader; } | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiMediaType; }}
     * @memberof OpenApiResponse
     */
    'content'?: { [key: string]: OpenApiMediaType; } | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiLink; }}
     * @memberof OpenApiResponse
     */
    'links'?: { [key: string]: OpenApiLink; } | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiResponse
     */
    'extensions'?: { [key: string]: object; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiResponse
     */
    'unresolvedReference'?: boolean;
    /**
     * 
     * @type {OpenApiReference}
     * @memberof OpenApiResponse
     */
    'reference'?: OpenApiReference;
}
/**
 * 
 * @export
 * @interface OpenApiSchema
 */
export interface OpenApiSchema {
    /**
     * 
     * @type {string}
     * @memberof OpenApiSchema
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiSchema
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiSchema
     */
    'format'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiSchema
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OpenApiSchema
     */
    'maximum'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiSchema
     */
    'exclusiveMaximum'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OpenApiSchema
     */
    'minimum'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiSchema
     */
    'exclusiveMinimum'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OpenApiSchema
     */
    'maxLength'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OpenApiSchema
     */
    'minLength'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiSchema
     */
    'pattern'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OpenApiSchema
     */
    'multipleOf'?: number | null;
    /**
     * 
     * @type {IOpenApiAny}
     * @memberof OpenApiSchema
     */
    'default'?: IOpenApiAny;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiSchema
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiSchema
     */
    'writeOnly'?: boolean;
    /**
     * 
     * @type {Array<OpenApiSchema>}
     * @memberof OpenApiSchema
     */
    'allOf'?: Array<OpenApiSchema> | null;
    /**
     * 
     * @type {Array<OpenApiSchema>}
     * @memberof OpenApiSchema
     */
    'oneOf'?: Array<OpenApiSchema> | null;
    /**
     * 
     * @type {Array<OpenApiSchema>}
     * @memberof OpenApiSchema
     */
    'anyOf'?: Array<OpenApiSchema> | null;
    /**
     * 
     * @type {OpenApiSchema}
     * @memberof OpenApiSchema
     */
    'not'?: OpenApiSchema;
    /**
     * 
     * @type {Set<string>}
     * @memberof OpenApiSchema
     */
    'required'?: Set<string> | null;
    /**
     * 
     * @type {OpenApiSchema}
     * @memberof OpenApiSchema
     */
    'items'?: OpenApiSchema;
    /**
     * 
     * @type {number}
     * @memberof OpenApiSchema
     */
    'maxItems'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OpenApiSchema
     */
    'minItems'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiSchema
     */
    'uniqueItems'?: boolean | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiSchema; }}
     * @memberof OpenApiSchema
     */
    'properties'?: { [key: string]: OpenApiSchema; } | null;
    /**
     * 
     * @type {number}
     * @memberof OpenApiSchema
     */
    'maxProperties'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OpenApiSchema
     */
    'minProperties'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiSchema
     */
    'additionalPropertiesAllowed'?: boolean;
    /**
     * 
     * @type {OpenApiSchema}
     * @memberof OpenApiSchema
     */
    'additionalProperties'?: OpenApiSchema;
    /**
     * 
     * @type {OpenApiDiscriminator}
     * @memberof OpenApiSchema
     */
    'discriminator'?: OpenApiDiscriminator;
    /**
     * 
     * @type {IOpenApiAny}
     * @memberof OpenApiSchema
     */
    'example'?: IOpenApiAny;
    /**
     * 
     * @type {Array<IOpenApiAny>}
     * @memberof OpenApiSchema
     */
    'enum'?: Array<IOpenApiAny> | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiSchema
     */
    'nullable'?: boolean;
    /**
     * 
     * @type {OpenApiExternalDocs}
     * @memberof OpenApiSchema
     */
    'externalDocs'?: OpenApiExternalDocs;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiSchema
     */
    'deprecated'?: boolean;
    /**
     * 
     * @type {OpenApiXml}
     * @memberof OpenApiSchema
     */
    'xml'?: OpenApiXml;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiSchema
     */
    'extensions'?: { [key: string]: object; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiSchema
     */
    'unresolvedReference'?: boolean;
    /**
     * 
     * @type {OpenApiReference}
     * @memberof OpenApiSchema
     */
    'reference'?: OpenApiReference;
}
/**
 * 
 * @export
 * @interface OpenApiSecurityScheme
 */
export interface OpenApiSecurityScheme {
    /**
     * 
     * @type {SecuritySchemeType}
     * @memberof OpenApiSecurityScheme
     */
    'type'?: SecuritySchemeType;
    /**
     * 
     * @type {string}
     * @memberof OpenApiSecurityScheme
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiSecurityScheme
     */
    'name'?: string | null;
    /**
     * 
     * @type {ParameterLocation}
     * @memberof OpenApiSecurityScheme
     */
    'in'?: ParameterLocation;
    /**
     * 
     * @type {string}
     * @memberof OpenApiSecurityScheme
     */
    'scheme'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiSecurityScheme
     */
    'bearerFormat'?: string | null;
    /**
     * 
     * @type {OpenApiOAuthFlows}
     * @memberof OpenApiSecurityScheme
     */
    'flows'?: OpenApiOAuthFlows;
    /**
     * 
     * @type {string}
     * @memberof OpenApiSecurityScheme
     */
    'openIdConnectUrl'?: string | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiSecurityScheme
     */
    'extensions'?: { [key: string]: object; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiSecurityScheme
     */
    'unresolvedReference'?: boolean;
    /**
     * 
     * @type {OpenApiReference}
     * @memberof OpenApiSecurityScheme
     */
    'reference'?: OpenApiReference;
}


/**
 * 
 * @export
 * @interface OpenApiServer
 */
export interface OpenApiServer {
    /**
     * 
     * @type {string}
     * @memberof OpenApiServer
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiServer
     */
    'url'?: string | null;
    /**
     * 
     * @type {{ [key: string]: OpenApiServerVariable; }}
     * @memberof OpenApiServer
     */
    'variables'?: { [key: string]: OpenApiServerVariable; } | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiServer
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiServerVariable
 */
export interface OpenApiServerVariable {
    /**
     * 
     * @type {string}
     * @memberof OpenApiServerVariable
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiServerVariable
     */
    'default'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof OpenApiServerVariable
     */
    'enum'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiServerVariable
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface OpenApiTag
 */
export interface OpenApiTag {
    /**
     * 
     * @type {string}
     * @memberof OpenApiTag
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiTag
     */
    'description'?: string | null;
    /**
     * 
     * @type {OpenApiExternalDocs}
     * @memberof OpenApiTag
     */
    'externalDocs'?: OpenApiExternalDocs;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiTag
     */
    'extensions'?: { [key: string]: object; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiTag
     */
    'unresolvedReference'?: boolean;
    /**
     * 
     * @type {OpenApiReference}
     * @memberof OpenApiTag
     */
    'reference'?: OpenApiReference;
}
/**
 * 
 * @export
 * @interface OpenApiWorkspace
 */
export interface OpenApiWorkspace {
    /**
     * 
     * @type {Array<OpenApiDocument>}
     * @memberof OpenApiWorkspace
     */
    'documents'?: Array<OpenApiDocument> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof OpenApiWorkspace
     */
    'fragments'?: Array<object> | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiWorkspace
     */
    'baseUrl'?: string | null;
    /**
     * 
     * @type {Array<Stream>}
     * @memberof OpenApiWorkspace
     */
    'artifacts'?: Array<Stream> | null;
}
/**
 * 
 * @export
 * @interface OpenApiXml
 */
export interface OpenApiXml {
    /**
     * 
     * @type {string}
     * @memberof OpenApiXml
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiXml
     */
    'namespace'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OpenApiXml
     */
    'prefix'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiXml
     */
    'attribute'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OpenApiXml
     */
    'wrapped'?: boolean;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OpenApiXml
     */
    'extensions'?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ParameterLocation = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type ParameterLocation = typeof ParameterLocation[keyof typeof ParameterLocation];


/**
 * 
 * @export
 * @enum {string}
 */

export const ParameterStyle = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;

export type ParameterStyle = typeof ParameterStyle[keyof typeof ParameterStyle];


/**
 * 
 * @export
 * @interface Plugin
 */
export interface Plugin {
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'userId'?: string | null;
    /**
     * 
     * @type {Array<Section>}
     * @memberof Plugin
     */
    'sections'?: Array<Section> | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'nameForHuman'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'nameForModel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'descriptionForHuman'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'descriptionForModel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'logoUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'legalInfoUrl'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Plugin
     */
    'isDeleted'?: boolean;
}
/**
 * 
 * @export
 * @interface PluginCreateRequest
 */
export interface PluginCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'originalText'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'nameForHuman'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'nameForModel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'descriptionForHuman'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'descriptionForModel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'logoUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginCreateRequest
     */
    'legalInfoUrl'?: string | null;
    /**
     * 
     * @type {Array<SectionCreateRequest>}
     * @memberof PluginCreateRequest
     */
    'sections'?: Array<SectionCreateRequest> | null;
}
/**
 * 
 * @export
 * @interface PluginUpdateRequest
 */
export interface PluginUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'nameForHuman'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'nameForModel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'descriptionForHuman'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'descriptionForModel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'logoUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PluginUpdateRequest
     */
    'legalInfoUrl'?: string | null;
    /**
     * 
     * @type {Array<SectionCreateRequest>}
     * @memberof PluginUpdateRequest
     */
    'sections'?: Array<SectionCreateRequest> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ReferenceType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9
} as const;

export type ReferenceType = typeof ReferenceType[keyof typeof ReferenceType];


/**
 * 
 * @export
 * @interface RuntimeExpression
 */
export interface RuntimeExpression {
    /**
     * 
     * @type {string}
     * @memberof RuntimeExpression
     */
    'expression'?: string | null;
}
/**
 * 
 * @export
 * @interface RuntimeExpressionAnyWrapper
 */
export interface RuntimeExpressionAnyWrapper {
    /**
     * 
     * @type {IOpenApiAny}
     * @memberof RuntimeExpressionAnyWrapper
     */
    'any'?: IOpenApiAny;
    /**
     * 
     * @type {RuntimeExpression}
     * @memberof RuntimeExpressionAnyWrapper
     */
    'expression'?: RuntimeExpression;
}
/**
 * 
 * @export
 * @interface Section
 */
export interface Section {
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'pluginId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Section
     */
    'content'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Section
     */
    'isDeleted'?: boolean;
}
/**
 * 
 * @export
 * @interface SectionCreateRequest
 */
export interface SectionCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof SectionCreateRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SectionCreateRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SectionCreateRequest
     */
    'content'?: string | null;
}
/**
 * 
 * @export
 * @interface SectionUpdateRequest
 */
export interface SectionUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SectionUpdateRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SectionUpdateRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SectionUpdateRequest
     */
    'content'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SecuritySchemeType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type SecuritySchemeType = typeof SecuritySchemeType[keyof typeof SecuritySchemeType];


/**
 * 
 * @export
 * @interface Stream
 */
export interface Stream {
    /**
     * 
     * @type {boolean}
     * @memberof Stream
     */
    'canRead'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Stream
     */
    'canWrite'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Stream
     */
    'canSeek'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Stream
     */
    'canTimeout'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    'length'?: number;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    'position'?: number;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    'readTimeout'?: number;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    'writeTimeout'?: number;
}

/**
 * PluginApi - axios parameter creator
 * @export
 */
export const PluginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/plugins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdDelete: async (pluginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdDelete', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}`
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdGet: async (pluginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdGet', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}`
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {PluginUpdateRequest} [pluginUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdPut: async (pluginId: string, pluginUpdateRequest?: PluginUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdPut', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}`
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pluginUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsGet: async (pluginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsGet', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}/sections`
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {SectionCreateRequest} [sectionCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsPost: async (pluginId: string, sectionCreateRequest?: SectionCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsPost', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}/sections`
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sectionCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sectionId 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsSectionIdDelete: async (sectionId: string, pluginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsSectionIdDelete', 'sectionId', sectionId)
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsSectionIdDelete', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}/sections/{sectionId}`
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsSectionIdGet: async (pluginId: string, sectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsSectionIdGet', 'pluginId', pluginId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsSectionIdGet', 'sectionId', sectionId)
            const localVarPath = `/api/plugins/{pluginId}/sections/{sectionId}`
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sectionId 
         * @param {string} pluginId 
         * @param {SectionUpdateRequest} [sectionUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsSectionIdPut: async (sectionId: string, pluginId: string, sectionUpdateRequest?: SectionUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsSectionIdPut', 'sectionId', sectionId)
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('apiPluginsPluginIdSectionsSectionIdPut', 'pluginId', pluginId)
            const localVarPath = `/api/plugins/{pluginId}/sections/{sectionId}`
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"pluginId"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sectionUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PluginCreateRequest} [pluginCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPost: async (pluginCreateRequest?: PluginCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/plugins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pluginCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PluginApi - functional programming interface
 * @export
 */
export const PluginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PluginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Plugin>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdDelete(pluginId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdDelete(pluginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdGet(pluginId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plugin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdGet(pluginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {PluginUpdateRequest} [pluginUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdPut(pluginId: string, pluginUpdateRequest?: PluginUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdPut(pluginId, pluginUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdSectionsGet(pluginId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Section>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdSectionsGet(pluginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {SectionCreateRequest} [sectionCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdSectionsPost(pluginId: string, sectionCreateRequest?: SectionCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Section>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdSectionsPost(pluginId, sectionCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sectionId 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdSectionsSectionIdDelete(sectionId: string, pluginId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdSectionsSectionIdDelete(sectionId, pluginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdSectionsSectionIdGet(pluginId: string, sectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Section>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdSectionsSectionIdGet(pluginId, sectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sectionId 
         * @param {string} pluginId 
         * @param {SectionUpdateRequest} [sectionUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPluginIdSectionsSectionIdPut(sectionId: string, pluginId: string, sectionUpdateRequest?: SectionUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPluginIdSectionsSectionIdPut(sectionId, pluginId, sectionUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PluginCreateRequest} [pluginCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginsPost(pluginCreateRequest?: PluginCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plugin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPluginsPost(pluginCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PluginApi - factory interface
 * @export
 */
export const PluginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PluginApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsGet(options?: any): AxiosPromise<Array<Plugin>> {
            return localVarFp.apiPluginsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdDelete(pluginId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPluginsPluginIdDelete(pluginId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdGet(pluginId: string, options?: any): AxiosPromise<Plugin> {
            return localVarFp.apiPluginsPluginIdGet(pluginId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {PluginUpdateRequest} [pluginUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdPut(pluginId: string, pluginUpdateRequest?: PluginUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiPluginsPluginIdPut(pluginId, pluginUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsGet(pluginId: string, options?: any): AxiosPromise<Array<Section>> {
            return localVarFp.apiPluginsPluginIdSectionsGet(pluginId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {SectionCreateRequest} [sectionCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsPost(pluginId: string, sectionCreateRequest?: SectionCreateRequest, options?: any): AxiosPromise<Section> {
            return localVarFp.apiPluginsPluginIdSectionsPost(pluginId, sectionCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sectionId 
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsSectionIdDelete(sectionId: string, pluginId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPluginsPluginIdSectionsSectionIdDelete(sectionId, pluginId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} pluginId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsSectionIdGet(pluginId: string, sectionId: string, options?: any): AxiosPromise<Section> {
            return localVarFp.apiPluginsPluginIdSectionsSectionIdGet(pluginId, sectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sectionId 
         * @param {string} pluginId 
         * @param {SectionUpdateRequest} [sectionUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPluginIdSectionsSectionIdPut(sectionId: string, pluginId: string, sectionUpdateRequest?: SectionUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiPluginsPluginIdSectionsSectionIdPut(sectionId, pluginId, sectionUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PluginCreateRequest} [pluginCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginsPost(pluginCreateRequest?: PluginCreateRequest, options?: any): AxiosPromise<Plugin> {
            return localVarFp.apiPluginsPost(pluginCreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PluginApi - object-oriented interface
 * @export
 * @class PluginApi
 * @extends {BaseAPI}
 */
export class PluginApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsGet(options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pluginId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdDelete(pluginId: string, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdDelete(pluginId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pluginId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdGet(pluginId: string, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdGet(pluginId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pluginId 
     * @param {PluginUpdateRequest} [pluginUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdPut(pluginId: string, pluginUpdateRequest?: PluginUpdateRequest, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdPut(pluginId, pluginUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pluginId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdSectionsGet(pluginId: string, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdSectionsGet(pluginId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pluginId 
     * @param {SectionCreateRequest} [sectionCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdSectionsPost(pluginId: string, sectionCreateRequest?: SectionCreateRequest, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdSectionsPost(pluginId, sectionCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sectionId 
     * @param {string} pluginId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdSectionsSectionIdDelete(sectionId: string, pluginId: string, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdSectionsSectionIdDelete(sectionId, pluginId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} pluginId 
     * @param {string} sectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdSectionsSectionIdGet(pluginId: string, sectionId: string, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdSectionsSectionIdGet(pluginId, sectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sectionId 
     * @param {string} pluginId 
     * @param {SectionUpdateRequest} [sectionUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPluginIdSectionsSectionIdPut(sectionId: string, pluginId: string, sectionUpdateRequest?: SectionUpdateRequest, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPluginIdSectionsSectionIdPut(sectionId, pluginId, sectionUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PluginCreateRequest} [pluginCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public apiPluginsPost(pluginCreateRequest?: PluginCreateRequest, options?: AxiosRequestConfig) {
        return PluginApiFp(this.configuration).apiPluginsPost(pluginCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PublicPluginApi - axios parameter creator
 * @export
 */
export const PublicPluginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openapiJsonGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/openapi.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sectionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sectionNameGet: async (sectionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionName' is not null or undefined
            assertParamExists('sectionNameGet', 'sectionName', sectionName)
            const localVarPath = `/{sectionName}`
                .replace(`{${"sectionName"}}`, encodeURIComponent(String(sectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnownAiPluginJsonGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/.well-known/ai-plugin.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicPluginApi - functional programming interface
 * @export
 */
export const PublicPluginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicPluginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openapiJsonGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpenApiDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openapiJsonGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sectionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sectionNameGet(sectionName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Section>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sectionNameGet(sectionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wellKnownAiPluginJsonGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AiPluginManifest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wellKnownAiPluginJsonGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicPluginApi - factory interface
 * @export
 */
export const PublicPluginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicPluginApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openapiJsonGet(options?: any): AxiosPromise<OpenApiDocument> {
            return localVarFp.openapiJsonGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sectionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sectionNameGet(sectionName: string, options?: any): AxiosPromise<Section> {
            return localVarFp.sectionNameGet(sectionName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnownAiPluginJsonGet(options?: any): AxiosPromise<AiPluginManifest> {
            return localVarFp.wellKnownAiPluginJsonGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicPluginApi - object-oriented interface
 * @export
 * @class PublicPluginApi
 * @extends {BaseAPI}
 */
export class PublicPluginApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicPluginApi
     */
    public openapiJsonGet(options?: AxiosRequestConfig) {
        return PublicPluginApiFp(this.configuration).openapiJsonGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sectionName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicPluginApi
     */
    public sectionNameGet(sectionName: string, options?: AxiosRequestConfig) {
        return PublicPluginApiFp(this.configuration).sectionNameGet(sectionName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicPluginApi
     */
    public wellKnownAiPluginJsonGet(options?: AxiosRequestConfig) {
        return PublicPluginApiFp(this.configuration).wellKnownAiPluginJsonGet(options).then((request) => request(this.axios, this.basePath));
    }
}


